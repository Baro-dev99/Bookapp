/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bookapp20.gui;

import bookapp20.Datasource;
import bookapp20.controllers.AuthorController;
import bookapp20.controllers.BookAuthorController;
import bookapp20.controllers.BookController;
import bookapp20.controllers.PublisherController;
import bookapp20.entities.Author;
import bookapp20.entities.Book;
import bookapp20.entities.BookAuthor;
import bookapp20.entities.Publisher;
import bookapp20.utilities.GuiListModels;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.MaskFormatter;

/**
 *
 * @author hover
 */
public class AddBookFrame extends javax.swing.JInternalFrame {

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("MM/dd/yyyy");
    private MaskFormatter maskFormatter = null;
    private final GuiListModels<Author> searchModel = new GuiListModels();
    private final GuiListModels<Author> chosenModel = new GuiListModels();
    private final DefaultComboBoxModel<Publisher> boxModel = new DefaultComboBoxModel<>();

    public AddBookFrame() {
        initComponents();
        try {
            maskFormatter = new MaskFormatter("##/##/####");
            maskFormatter.setPlaceholderCharacter('_');
        } catch (ParseException ex) {
            Logger.getLogger(AddBookFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        dateField.setFormatterFactory(new DefaultFormatterFactory(maskFormatter));
        initActions();        
    }

    private void initActions() {
        setLocation(50, 50);
        searchList.setModel(searchModel);
        chosenList.setModel(chosenModel);
        publisherBox.setModel(boxModel);
    }

    public void reset() {
        codeField.setText(null);
        titleField.setText(null);
        publisherField.setText(null);
        boxModel.removeAllElements();
        authorField.setText(null);
        searchModel.removeAll();
        chosenModel.removeAll();
        dateField.setText("");
        dateField.setValue(null);
        codeField.requestFocus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        codeField = new javax.swing.JTextField();
        titleField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        dateField = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        authorField = new javax.swing.JTextField();
        searchAuthorBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        chosenList = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        publisherField = new javax.swing.JTextField();
        searchPublisherBtn = new javax.swing.JButton();
        publisherBox = new javax.swing.JComboBox<>();
        cancelBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        setTitle("Add New Book");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Basic Info"));

        jLabel1.setText("Code");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Title");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Date");

        dateField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                dateFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                dateFieldFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(codeField)
                    .addComponent(titleField)
                    .addComponent(dateField))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(codeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(dateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Authors"));

        jLabel3.setText("Search Authors");

        authorField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                authorFieldKeyPressed(evt);
            }
        });

        searchAuthorBtn.setText("Search");
        searchAuthorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAuthorBtnActionPerformed(evt);
            }
        });

        searchList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(searchList);

        chosenList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chosenList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                chosenListMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(chosenList);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(authorField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchAuthorBtn)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane1, jScrollPane2});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(authorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchAuthorBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Publisher"));

        jLabel4.setText("Search Publisher");

        publisherField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                publisherFieldKeyPressed(evt);
            }
        });

        searchPublisherBtn.setText("Search");
        searchPublisherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchPublisherBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addComponent(publisherField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchPublisherBtn))
                    .addComponent(publisherBox, 0, 195, Short.MAX_VALUE))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(publisherField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchPublisherBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(publisherBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelBtn)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelBtn, saveBtn});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn)
                    .addComponent(saveBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchAuthorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAuthorBtnActionPerformed
        String subName = authorField.getText();
        if (subName != null && subName.trim().isEmpty()) {
            subName = null;
        }
        new SearchAuthorsPerformed(subName).execute();
    }//GEN-LAST:event_searchAuthorBtnActionPerformed

    private void searchPublisherBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchPublisherBtnActionPerformed
        String subName = publisherField.getText();
        if (subName != null && subName.trim().isEmpty()) {
            subName = null;
        }
        new SearchPublisherPerformed(subName).execute();
    }//GEN-LAST:event_searchPublisherBtnActionPerformed

    private void authorFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //searchAuthorBtn.doClick();
            String subName = authorField.getText();
            if (subName != null && subName.trim().isEmpty()) {
                subName = null;
            }
            new SearchAuthorsPerformed(subName).execute();
        }
    }//GEN-LAST:event_authorFieldKeyPressed

    private void publisherFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_publisherFieldKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            //searchAuthorBtn.doClick();
            String subName = publisherField.getText();
            if (subName != null && subName.trim().isEmpty()) {
                subName = null;
            }
            new SearchPublisherPerformed(subName).execute();
        }
    }//GEN-LAST:event_publisherFieldKeyPressed

    private void searchListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchListMouseClicked
        if (evt.getClickCount() == 2) {
            if (searchModel.isEmpty()) {
                return;
            }
            Author a = searchList.getSelectedValue();
            if (!chosenModel.contains(a)) {
                chosenModel.add(a);
                chosenList.ensureIndexIsVisible(chosenModel.getSize() - 1);
            }
        }
    }//GEN-LAST:event_searchListMouseClicked

    private void chosenListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_chosenListMouseClicked
        if (evt.getClickCount() == 2) {
            if (chosenModel.isEmpty()) {
                return;
            }
            Author a = chosenList.getSelectedValue();
            chosenModel.remove(a);
        }
    }//GEN-LAST:event_chosenListMouseClicked

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void dateFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFieldFocusGained
        if (dateField.getFocusLostBehavior() == JFormattedTextField.PERSIST) {
            dateField.setFocusLostBehavior(JFormattedTextField.COMMIT_OR_REVERT);
        }
    }//GEN-LAST:event_dateFieldFocusGained

    private void dateFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_dateFieldFocusLost
        try {
            LocalDate date = LocalDate.parse(dateField.getText(), formatter);
            dateField.setValue(date.format(formatter));
        } catch (DateTimeParseException ex) {
            dateField.setFocusLostBehavior(JFormattedTextField.PERSIST);
            dateField.setText(null);
            dateField.setValue(null);
        }
    }//GEN-LAST:event_dateFieldFocusLost

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        String code = codeField.getText();
        String title = titleField.getText();
        LocalDate date;
        Object sdate = dateField.getValue();
        Publisher publisher = (Publisher) publisherBox.getSelectedItem();
        List<Author> lsa = chosenModel.getAll();
        if (code == null || code.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Code field should not be empty",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            codeField.requestFocus();
            return;
        }
        if (title == null || title.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Title field should not be empty",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            titleField.requestFocus();
            return;
        }
        if (sdate == null || sdate.toString().isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Date field should not be empty",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            dateField.requestFocus();
            return;
        }
        if (publisher == null) {
            JOptionPane.showMessageDialog(this,
                    "Publisher should be chosen",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            publisherField.requestFocus();
            return;
        }
        if (lsa.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Authors should be chosen",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            authorField.requestFocus();
        }
        date = LocalDate.parse(sdate.toString(), formatter);
        Book book = new Book(code);
        book.setTitle(title);
        book.setDate(date);
        book.setPublisher(publisher);

        new SaveBookPerformed(book, lsa).execute();
    }//GEN-LAST:event_saveBtnActionPerformed

    private class SaveBookPerformed extends SwingWorker<String, Void> {

        private Book book;
        List<Author> lsa;

        public SaveBookPerformed(Book book, List<Author> lsa) {
            this.book = book;
            this.lsa = lsa;
        }

        @Override
        protected String doInBackground() throws Exception {
            try {
                Datasource.getConnection().setAutoCommit(false);
                BookController.instance.create(book);
                for (Author a : lsa) {
                    BookAuthorController.instance.create(new BookAuthor(book, a));
                }
                Datasource.getConnection().commit();
            } catch (SQLException ex) {
                Datasource.getConnection().rollback();
                return ex.getMessage();
            }
            return null;
        }

        @Override
        public void done() {
            try {
                if (get() == null) {
                    JOptionPane.showMessageDialog(AddBookFrame.this,
                            book.toString() + " has been added successfully",
                            "Successful Entry",
                            JOptionPane.INFORMATION_MESSAGE);
                    reset();
                } else {
                    JOptionPane.showMessageDialog(AddBookFrame.this,
                            GuiUtilities.openningHtml + get() + GuiUtilities.closingHtml,
                            "Entry Error",
                            JOptionPane.ERROR_MESSAGE);
                }
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(AddPublisherFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class SearchAuthorsPerformed extends SwingWorker<List<Author>, Void> {

        private final String subName;

        public SearchAuthorsPerformed(String subName) {
            this.subName = subName;
        }

        @Override
        protected List<Author> doInBackground() throws Exception {
            return AuthorController.instance.findByLike(subName);
        }

        @Override
        public void done() {
            searchModel.removeAll();
            try {
                searchModel.set(get());
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(AddBookFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class SearchPublisherPerformed extends SwingWorker<List<Publisher>, Void> {

        private final String subName;

        public SearchPublisherPerformed(String subName) {
            this.subName = subName;
        }

        @Override
        protected List<Publisher> doInBackground() throws Exception {
            return PublisherController.instance.findByLike(subName);
        }

        @Override
        public void done() {
            boxModel.removeAllElements();
            List<Publisher> ls;
            try {
                ls = get();
                for (Publisher p : get()) {
                    boxModel.addElement(p);
                }

            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(AddBookFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField authorField;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JList<Author> chosenList;
    private javax.swing.JTextField codeField;
    private javax.swing.JFormattedTextField dateField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<Publisher> publisherBox;
    private javax.swing.JTextField publisherField;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchAuthorBtn;
    private javax.swing.JList<Author> searchList;
    private javax.swing.JButton searchPublisherBtn;
    private javax.swing.JTextField titleField;
    // End of variables declaration//GEN-END:variables

}
